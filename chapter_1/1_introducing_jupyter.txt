//In Markdown:
This is a $\LaTeX$ inline equation: $x = Ax+b$ 
And this is a one-liner: $$x = Ax + b$$ 

//LaTeX cell examples
In: 
%%latex 
\[ 
 |u(t)| =  
  \begin{cases}  
   u(t) & \text{if } t \geq 0 \\ 
   -u(t)       & \text{otherwise } 
  \end{cases} 
\]

In: 
%%latex 
\begin{align} 
f(x) &= (a+b)^2 \\ 
     &= a^2 + (a+b) + (a+b) + b^2 \\ 
     &= a^2 + 2\cdot (a+b) + b^2 
\end{align}

//Jupyter console examples
In [1]: obj1 = range(10)
In [2]: obj1?
In [3]: %timeit x=100
In [4]: %quickref

//Jupyter cell examples
In: import random
a = random.randint(0, 100)
a
Out: 16
In: a*2
Out: 32

//Running this command after the previous one should yield a logic error, unless you "Run All"
In: import random
a = random.randint(0, 100)
a
Out: 56
In: a*2
Out: 32

//Data science examples
In:
%matplotlib inline
import matplotlib.pyplot as plt
from sklearn import datasets
from sklearn.feature_selection import SelectKBest, f_regression
from sklearn.linear_model import LinearRegression
from sklearn.svm import SVR
from sklearn.ensemble import RandomForestRegressor

In:
boston_dataset = datasets.load_boston()
X_full = boston_dataset.data
Y = boston_dataset.target
print (X_full.shape)
print (Y.shape)
Out:
(506, 13)
(506,)

In:
selector = SelectKBest(f_regression, k=1)
selector.fit(X_full, Y)
X = X_full[:, selector.get_support()]
print (X.shape)
Out:
(506, 1)

//This creates a scatter plot
In:
def plot_scatter(X,Y,R=None):
    plt.scatter(X, Y, s=32, marker='o', facecolors='white')
    if R is not None:
            plt.scatter(X, R, color='red', linewidth=0.5)
    plt.show()
In:
plot_scatter(X,Y)

//This creates a linear regression model
In:
regressor = LinearRegression(normalize=True).fit(X, Y)
plot_scatter(X, Y, regressor.predict(X))

//This creates a Support Vector Machine (SVM) model
In:
regressor = SVR().fit(X, Y)
plot_scatter(X, Y, regressor.predict(X))

//This creates a random forest model
In:
regressor = RandomForestRegressor().fit(X, Y)
plot_scatter(X, Y, regressor.predict(X))
